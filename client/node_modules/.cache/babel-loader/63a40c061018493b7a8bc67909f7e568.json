{"ast":null,"code":"var _jsxFileName = \"/Users/rigoangeles/Desktop/deployNameLessApp/nameless-app/client/src/instruments/ccirini.tsx\";\n// 3rd party library imports\nimport * as Tone from 'tone';\nimport { List, Range } from 'immutable'; // project imports\n\nimport { Instrument } from '../Instruments';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Polysynth setup for a unique Guitar sound\nconst limiter = new Tone.Limiter(0).toDestination();\nconst filter = new Tone.FeedbackCombFilter(1 / 1000, .7).toDestination();\nlet pSynth = new Tone.PolySynth();\npSynth.maxPolyphony = 7;\npSynth.toDestination();\npSynth.set({\n  oscillator: {\n    type: \"fmsine6\"\n  },\n  envelope: {\n    attack: 0.01,\n    decay: .1,\n    sustain: .2\n  },\n  volume: -15\n});\npSynth.connect(filter);\npSynth.connect(limiter);\nexport function GuitarString(_ref) {\n  let {\n    stringName,\n    stringIndex,\n    transpositionalOffset,\n    activeNotesProp,\n    fretsProp,\n    octave\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inline-flex br b--black\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseDown: () => {\n        activeNotesProp[stringIndex] = '';\n      },\n      className: \"inline-flex pa1 bg-silver\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"flex bg-transparent\",\n        type: \"radio\",\n        value: \"male\",\n        name: `string${stringIndex}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w1\",\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        className: \"flex-auto f3\",\n        children: stringName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), Range(octave, octave + 2).map(currentOctave => fretsProp.map(fret => {\n      let note = `${fret.note}${currentOctave}`;\n      let fretStyle = 'inline-flex bg-light-yellow br b--silver pa1';\n      note = Tone.Midi(note).transpose(transpositionalOffset).toNote();\n\n      if (currentOctave === octave && fret.note === 'C') {\n        fretStyle = 'inline-flex br b--washed-yellow bw3 pa1';\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: fretStyle,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onMouseDown: () => {\n            activeNotesProp[stringIndex] = note;\n          },\n          className: \"flex-auto pr2 pl2 bg-transparent\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"flex\",\n            type: \"radio\",\n            value: \"male\",\n            name: `string${stringIndex}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this);\n    }))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_c = GuitarString;\n\nfunction fretMarker(numberOfFrets) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inline-flex pt3\",\n    children: [/*#__PURE__*/_jsxDEV(\"text\", {\n      style: {\n        paddingRight: 10,\n        fontSize: 12\n      },\n      children: \"Mute\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      style: {\n        paddingRight: 19,\n        fontSize: 12\n      },\n      children: \"Open\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Range(1, numberOfFrets - 1).map(fret => {\n        return /*#__PURE__*/_jsxDEV(\"text\", {\n          style: {\n            paddingRight: 26.5,\n            fontSize: 12,\n            alignItems: 'center'\n          },\n          children: fret.toString().padStart(2, '0')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Guitar(_ref2) {\n  let {\n    synth,\n    setSynth\n  } = _ref2;\n  const frets = List([{\n    note: 'C',\n    idx: 0\n  }, {\n    note: 'Db',\n    idx: 0.5\n  }, {\n    note: 'D',\n    idx: 1\n  }, {\n    note: 'Eb',\n    idx: 1.5\n  }, {\n    note: 'E',\n    idx: 2\n  }, {\n    note: 'F',\n    idx: 3\n  }, {\n    note: 'Gb',\n    idx: 3.5\n  }, {\n    note: 'G',\n    idx: 4\n  }, {\n    note: 'Ab',\n    idx: 4.5\n  }, {\n    note: 'A',\n    idx: 5\n  }, {\n    note: 'Bb',\n    idx: 5.5\n  }, {\n    note: 'B',\n    idx: 6\n  }]);\n  const guitarStrings = List([{\n    note: 'E',\n    octave: 4,\n    offset: 4,\n    str: 1\n  }, {\n    note: 'B',\n    octave: 3,\n    offset: 11,\n    str: 2\n  }, {\n    note: 'G',\n    octave: 3,\n    offset: 7,\n    str: 3\n  }, {\n    note: 'D',\n    octave: 3,\n    offset: 2,\n    str: 4\n  }, {\n    note: 'A',\n    octave: 2,\n    offset: 9,\n    str: 5\n  }, {\n    note: 'E',\n    octave: 2,\n    offset: 4,\n    str: 6\n  }]);\n  let activeNotes = ['', '', '', '', '', ''];\n\n  function strum() {\n    pSynth.releaseAll();\n    Tone.Transport.cancel();\n    pSynth.unsync();\n    let temp = activeNotes.filter(n => n !== '');\n    let triggeredNotes = temp.map(x => Tone.Frequency(x).toNote());\n    pSynth.triggerAttackRelease(triggeredNotes, .6);\n  }\n\n  function pluck() {\n    pSynth.releaseAll();\n    Tone.Transport.cancel();\n    Tone.Transport.stop();\n    pSynth.sync();\n    let temp = activeNotes.filter(n => n !== '');\n    let triggeredNotes = temp.map(x => Tone.Frequency(x).toNote());\n\n    for (let i = 0; i < triggeredNotes.length; i++) {\n      pSynth.triggerAttackRelease(triggeredNotes[i], .3, (triggeredNotes.length - (i + 1)) / 2);\n    }\n\n    Tone.Transport.start();\n  }\n\n  const setOscillator = () => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n      return new Tone.Synth(pSynth.get()).toDestination();\n    });\n  }; //setOscillator();\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-column\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: fretMarker(24)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-column\",\n      children: [guitarStrings.map(str => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: /*#__PURE__*/_jsxDEV(GuitarString, {\n            note: str.note,\n            synth: pSynth,\n            octave: str.octave,\n            transpositionalOffset: str.offset,\n            stringName: str.note,\n            activeNotesProp: activeNotes,\n            fretsProp: frets,\n            stringIndex: str.str\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-100 tc\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dib w-30 pa2\",\n          onMouseDown: () => strum(),\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"w-100 bg-light-silver\",\n            children: \"Strum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dib w-30 pa2\",\n          onMouseDown: () => pluck(),\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"w-100 bg-light-silver\",\n            children: \"Arpeggiate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dib w-30 pa2\",\n          onMouseDown: () => setOscillator(),\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"w-100 bg-light-silver\",\n            children: \"Set as active instrument\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Guitar;\nexport const GuitarInstrument = new Instrument('ccirini', Guitar);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GuitarString\");\n$RefreshReg$(_c2, \"Guitar\");","map":{"version":3,"sources":["/Users/rigoangeles/Desktop/deployNameLessApp/nameless-app/client/src/instruments/ccirini.tsx"],"names":["Tone","List","Range","Instrument","limiter","Limiter","toDestination","filter","FeedbackCombFilter","pSynth","PolySynth","maxPolyphony","set","oscillator","type","envelope","attack","decay","sustain","volume","connect","GuitarString","stringName","stringIndex","transpositionalOffset","activeNotesProp","fretsProp","octave","map","currentOctave","fret","note","fretStyle","Midi","transpose","toNote","fretMarker","numberOfFrets","paddingRight","fontSize","alignItems","toString","padStart","Guitar","synth","setSynth","frets","idx","guitarStrings","offset","str","activeNotes","strum","releaseAll","Transport","cancel","unsync","temp","n","triggeredNotes","x","Frequency","triggerAttackRelease","pluck","stop","sync","i","length","start","setOscillator","oldSynth","disconnect","Synth","get","GuitarInstrument"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport * as Tone from 'tone';\nimport { List, Range } from 'immutable';\n\n// project imports\nimport { Instrument, InstrumentProps } from '../Instruments';\nimport { PolySynth } from 'tone';\n\n/** ------------------------------------------------------------------------ **\n * Contains implementation of components for Guitar.\n ** ------------------------------------------------------------------------ */\ninterface GuitarProps {\n  note: string; // C, Db, D, Eb, E, F, Gb, G, Ab, A, Bb, B\n  duration?: string;\n  synth?: Tone.PolySynth; // Contains library code for making polyphonic sound\n  muted?: boolean;\n  octave: number;\n  stringName?: string;\n  stringIndex: number;\n  transpositionalOffset: number; // Transpositional offset\n  activeNotesProp: string[]; // Polyphonic note output\n  fretsProp: List<{note: string,idx:number}>; \n}\n\n// Polysynth setup for a unique Guitar sound\nconst limiter = new Tone.Limiter(0).toDestination();\nconst filter = new Tone.FeedbackCombFilter(1/1000,.7).toDestination();\nlet pSynth = new Tone.PolySynth();\n\npSynth.maxPolyphony = 7;\npSynth.toDestination();\n\npSynth.set({\n\toscillator: {\n\t\ttype: \"fmsine6\"\n\t},\n\tenvelope: {\n\t\tattack: 0.01,\n        decay: .1,\n        sustain: .2,\n\t},\n    volume: -15,\n});\n\npSynth.connect(filter);\npSynth.connect(limiter);\n\n\nexport function GuitarString({\n  stringName,\n  stringIndex,\n  transpositionalOffset,\n  activeNotesProp,\n  fretsProp,\n  octave,\n\n}: GuitarProps): JSX.Element {\n  return (\n    <div className = 'inline-flex br b--black'>\n        <div onMouseDown={()=>{activeNotesProp[stringIndex] = '';\n            }} className='inline-flex pa1 bg-silver'>\n            <input className='flex bg-transparent' type='radio' value='male' name= {`string${stringIndex}`}/>\n        </div>\n        <div className ='flex w1'>\n            <text className='flex-auto f3'>{stringName}</text>\n        </div>\n    {Range(octave, octave+2).map(currentOctave =>\n        fretsProp.map(fret => {\n            let note = `${fret.note}${currentOctave}`;\n            let fretStyle: string = 'inline-flex bg-light-yellow br b--silver pa1';\n            note = Tone.Midi(note).transpose(transpositionalOffset).toNote();\n            if(currentOctave === octave && fret.note === 'C' ){\n                fretStyle = 'inline-flex br b--washed-yellow bw3 pa1';\n            }\n            return (\n                <div className = {fretStyle}>\n                    <div\n                    onMouseDown={()=>{activeNotesProp[stringIndex] = note;}}\n                    className='flex-auto pr2 pl2 bg-transparent'\n                    >\n                        <input className='flex' type='radio' value='male' name= {`string${stringIndex}`}/>\n                    </div>\n                </div>\n            );\n        }),\n        )}\n    </div>\n  );\n}\n\nfunction fretMarker(numberOfFrets: number){\n  return(\n    <div className='inline-flex pt3'>\n    <text style={{\n        paddingRight: 10,\n        fontSize: 12,\n    }}>Mute</text>\n    <text style={{\n        paddingRight: 19,\n        fontSize: 12\n    }}>Open</text>\n      <div>{Range(1,numberOfFrets-1).map(fret => {\n          return(\n              <text style={{\n                  paddingRight:26.5,\n                  fontSize:12,\n                  alignItems: 'center',\n            }}>{fret.toString().padStart(2,'0')}</text>\n          )\n      }\n      )}</div>\n      </div>\n  )\n}\n\n\n\n\n\n\nfunction Guitar({ synth, setSynth }: InstrumentProps): JSX.Element {\n  const frets = List([\n    { note: 'C', idx: 0 },\n    { note: 'Db', idx: 0.5 },\n    { note: 'D', idx: 1 },\n    { note: 'Eb', idx: 1.5 },\n    { note: 'E', idx: 2 },\n    { note: 'F', idx: 3 },\n    { note: 'Gb', idx: 3.5 },\n    { note: 'G', idx: 4 },\n    { note: 'Ab', idx: 4.5 },\n    { note: 'A', idx: 5 },\n    { note: 'Bb', idx: 5.5 },\n    { note: 'B', idx: 6 },\n  ]);\n\n  const guitarStrings = List([\n    { note: 'E', octave: 4, offset: 4, str: 1},\n    { note: 'B', octave: 3, offset: 11, str: 2},\n    { note: 'G', octave: 3, offset: 7, str: 3},\n    { note: 'D', octave: 3, offset: 2, str: 4},\n    { note: 'A', octave: 2, offset: 9, str: 5},\n    { note: 'E', octave: 2, offset: 4, str: 6},\n  ]);\n\n  let activeNotes: string[] = ['','','','','',''];\n\n  function strum(){\n    pSynth.releaseAll();\n    Tone.Transport.cancel();\n    pSynth.unsync();\n\n    let temp = activeNotes.filter(n=>n!=='')\n    let triggeredNotes: string[] = temp.map(x=>Tone.Frequency(x).toNote())\n\n    pSynth.triggerAttackRelease(triggeredNotes,.6);\n  }\n\n  function pluck(){\n    pSynth.releaseAll();\n    Tone.Transport.cancel();\n    Tone.Transport.stop();\n    pSynth.sync();\n\n    let temp = activeNotes.filter(n=>n!=='')\n    let triggeredNotes: string[] = temp.map(x=>Tone.Frequency(x).toNote())\n\n    for(let i = 0; i < triggeredNotes.length;i++){\n        pSynth.triggerAttackRelease(triggeredNotes[i],.3,(triggeredNotes.length - (i+1))/2);\n    }\n\n    Tone.Transport.start();\n  }\n\n\n  \n  const setOscillator = () => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n      \n      return new Tone.Synth(\n        pSynth.get()\n      ).toDestination();\n    });\n  };\n\n  //setOscillator();\n\n  return (\n    <div className='flex-column'>\n        <div>{fretMarker(24)}</div>\n        <div className='flex-column'>\n        {guitarStrings.map(str =>{ \n                return(\n                    <div className='flex'>\n                     <GuitarString\n                        note={str.note}\n                        synth={pSynth}\n                        octave={str.octave}\n                        transpositionalOffset={str.offset}\n                        stringName = {str.note}\n                        activeNotesProp = {activeNotes}\n                        fretsProp = {frets}\n                        stringIndex ={str.str}\n                    />\n                </div>\n                )\n            })}\n        <div className='w-100 tc'>\n        <div className='dib w-30 pa2' onMouseDown={()=> strum()}>\n            <button className='w-100 bg-light-silver'>Strum</button>\n        </div>\n        <div className='dib w-30 pa2' onMouseDown={()=> pluck()}>\n            <button className='w-100 bg-light-silver'>Arpeggiate</button>\n        </div>\n        <div className='dib w-30 pa2' onMouseDown={()=> setOscillator()}>\n            <button className='w-100 bg-light-silver'>Set as active instrument</button>\n        </div>\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport const GuitarInstrument = new Instrument('ccirini', Guitar);"]},"metadata":{},"sourceType":"module"}